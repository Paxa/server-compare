#!/usr/bin/env ruby

$:.push(File.expand_path("../../lib", __FILE__))

require 'optparse'

require "server_compare/collect"
require "server_compare/cli"

CONFIG = {}
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: sc-compare root@hostname [options]\n"

  opts.on("--help", "Show help") do
    puts option_parser.help
    exit
  end

  opts.on("-h", "--host [HOST_NAME]", "Host name") do |hostname|
    CONFIG[:host] = hostname
  end

  opts.on("--pem [PEM_FILE]", "Pem file") do |pem_file|
    CONFIG[:keys] = pem_file
  end

  opts.on("--password [PASSWORD]", "SSH Password") do |password|
    CONFIG[:password] = password
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    CONFIG[:verbose] = v
  end

  opts.on("-d", "--[no-]dry", "Show server summary and exit") do |dry|
    CONFIG[:dry] = dry
  end

#  opts.separator <<-EOS
#Supported commands:
# testhook [url]          Send testing webhook to specified url
#Example:
# veritrans testhook http://localhost:3000/vt_events
# veritrans testhook -o my-order-1 -c ~/path/to/veritrans.yml http://localhost:3000/vt_events
#EOS

end

option_parser.parse!

server = ARGV.shift

class Help < Exception; end
begin
  if server
    ServerCompare::CLI.command_collect(server)
=begin
    if server.include?("@")
      ssh_user, ssh_host = server.split("@")

      collector = ServerCompare::Collect.new(ssh_host, ssh_user, CONFIG)
    elsif server.start_with?(":")
      unless File.exist?("./servers.yml")
        puts "Can not find file ./servers.yml"
        puts
        raise Help
      end

      config = ServerCompare::ConfigFile.new("./servers.yml")
      server_name = server.sub(/^:/, '')

      unless config.servers[server_name]
        puts "Unknown server: #{server_name}, registered: #{config.servers.keys.join(", ")}"
        puts
        raise Help
      end

      collector = ServerCompare::Collect.from_config(config.servers[server_name])
    else
      raise Help
    end

    collector.collect
    collector.disconnect
    puts collector.state.summary

    if config && !CONFIG[:dry]
      storage = ServerCompare::GitStorage.for_server(config.repo_dir, server_name, config.repo_url)
      storage.init_repo#(server_name)
      storage.check_remote_changes
      storage.remove_all_files
      collector.state.write_files(storage.path)
      storage.commit_changes(server_name)
    end
=end
  elsif CONFIG[:host]
    ServerCompare::CLI.command_collect(":#{CONFIG[:host]}")
  else
    raise Help
  end
rescue Help => err
  puts option_parser.help
end